org: sachack
app: bridge
service: gap

plugins:
  - serverless-esbuild
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-dynamodb-local
  - serverless-offline    

provider:
  name: aws
  runtime: nodejs20.x
  memorySize: 256
  region: us-west-1
  stage: dev
  deploymentMethod: direct
  tracing:
    lambda: true
    apiGateway: true
  environment:
    GEMINI_KEY: ${param:GEMINI_KEY}
    GEMINI_URL: ${param:GEMINI_URL}
    USER_SCHEMA: UserTable
    COGNITO_CLIENT_ID: ${param:COGNITO_CLIENT_ID}
    COGNITO_CLIENT_SECRET: ${param:COGNITO_CLIENT_SECRET}

functions:
  postHandler:
    handler: src/post.handler
    events:
      - http:
          path: /handler
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(models/post-model.json)}
    iamRoleStatementsName: userTablePostRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource:
          - !GetAtt UserTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:Scan
          - dynamodb:Query
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_SCHEMA}"
      - Effect: Allow
        Action:
          - cognito-idp:AdminCreateUser
        Resource: "arn:aws:cognito-idp:us-west-1:098121828254:userpool/us-west-1_fUQe9TbVk"
    
  getHandler:
    handler: src/get.handler
    events:
      - http:
          path: /handler/{id}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: {Ref: CognitoAuthorizer}
    iamRoleStatementsName: userTableGetRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource:
          - !GetAtt UserTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:Query
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_SCHEMA}"

  geminiHandler:
    handler: src/geminiBenefits.handler
    events:
      - http:
          path: /gemini/benefits
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(models/gemini-benefits-model.json)}
    timeout: 30

  geminiParseHandler:
    handler: src/geminiUserData.handler
    events:
      - http:
          path: /gemini/userdata
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(models/gemini-user-data-model.json)}
    timeout: 30

  signupHandler:
    handler: src/signUp.handler
    events:
      - http:
          path: /signup
          method: post
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:Query
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_SCHEMA}"

  loginHandler:
    handler: src/login.handler
    events:
      - http:
          path: /login
          method: post
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:Query
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_SCHEMA}"

resources:
  Resources:
    UserTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.USER_SCHEMA}
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
        BillingMode: PAY_PER_REQUEST
    CognitoAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoAuthorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - arn:aws:cognito-idp:us-west-1:098121828254:userpool/us-west-1_fUQe9TbVk